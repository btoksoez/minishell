External functions:
	- readline, rl_clear_history, rl_on_new_line,
	- rl_replace_line, rl_redisplay, add_history,
	- printf, malloc, free, write, access, open, read,
	- close, fork, wait, waitpid, wait3, wait4, signal,
	- sigaction, sigemptyset, sigaddset, kill, exit,
	- getcwd, chdir, stat, lstat, fstat, unlink, execve,
	- dup, dup2, pipe, opendir, readdir, closedir,
	- strerror, perror, isatty, ttyname, ttyslot, ioctl,
	- getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
	- tgetnum, tgetstr, tgoto, tputs

Mandatory Part:
	1. Display a prompt when waiting for a new command
	2. Have a working history
	3. Seatch and launch the right executable (PATH variable or absolute path)
	4. Handle ’ which should prevent the shell from interpreting the metacharacters in the quoted sequence.
	5. Handle " which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $
	6. Implement redirections:
		◦ < should redirect input.
		◦ > should redirect output.
		◦ << should be given a delimiter, then read the input until a line containing the delimiter is seen. It doesn’t have to update the history!
		◦ >> should redirect output in append mode.
	7. Implement | The output of each command in the pipeline is connected to the input of the next command via a pipe.
	8. Handle environment variables ($ followed by a sequence of characters) which should expand to their values.
	9. Handle $? which should expand to the exit status of the most recently executed foreground pipeline.
	10. Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash. In interactive mode:
		◦ ctrl-C displays a new prompt on a new line.
		◦ ctrl-D exits the shell.
		◦ ctrl-\ does nothing.
	11. Your shell must implement the following builtins:
		◦ echo with option -n
		◦ cd with only a relative or absolute path
		◦ pwd with no options
		◦ export with no options
		◦ unset with no options
		◦ env with no options or arguments
		◦ exit with no options

NOTE: Your shell SHOULD NOT interpret unclosed quotes or special characters such as \ or ;

NOTE: Avoid using more than one global variable to indicate a received signal.
		This approach ensures that your signal handler will not access your main data structures.
		This global variable cannot provide any other information or data access than the number of a received signal.
		Therefore, using "norm" type structures in the global scope is forbidden.

NOTE: The readline() function can cause memory leaks. You don’t have to fix them. But
		that doesn’t mean your own code, yes the code you wrote, can have memory leaks.
